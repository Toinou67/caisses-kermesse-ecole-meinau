import { useState } from "react";
import { Category } from "@/types/kermesse";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Plus } from "lucide-react";

interface CategoryFormProps {
  onSave: (category: Omit<Category, 'id'>) => void;
  trigger?: React.ReactNode;
}

const EXTENDED_EMOJI_OPTIONS = [
  // Boissons
  'ü•§', 'üç∫', 'üßÉ', '‚òï', 'üßä', 'üç∑', 'ü•Ç', 'üç∏', 'üçπ', 'üßâ', 'üçµ', 'ü•õ', 'üç∂', 'ü•É', 'üßã',
  // Nourriture
  'üçø', 'üå≠', 'üçî', 'üçï', 'üßÅ', 'üç©', 'üç™', 'üçé', 'üçå', 'üçä', 'üçì', 'ü•®', 'ü•ñ', 'üßÄ', 'ü•™', 'üåÆ', 'üçú', 'üçù', 'ü•ó', 'üçõ', 'üç£', 'üç§', 'üçô', 'ü•ü', 'üç±', 'üçò', 'ü•ß', 'üç∞', 'üéÇ', 'üç´', 'üç¨', 'üç≠',
  // Jeux & Activit√©s
  'üéØ', 'üéÆ', 'üé≤', 'üé≥', 'üé™', 'üé®', 'üé≠', 'üé†', 'üé°', 'üé¢', 'üéä', 'üéà', 'üéÅ', 'üèÜ', 'üéñÔ∏è', 'üèÖ', 'üé∏', 'ü•Å', 'üé∫', 'üé∑', 'üéª', 'üé§', 'üéß', 'üé¨', 'üé≠', 'üÉè', 'üé∞',
  // Objets divers
  '‚≠ê', 'üåü', '‚ú®', 'üéâ', 'üî•', 'üí´', 'üéµ', 'üé∂', 'üíé', 'üèÄ', '‚öΩ', 'üèà', 'üéæ', 'üèê', 'üèì', 'üè∏', 'ü•è', 'üèí', 'üèë', 'ü•ç', 'üèè', '‚õ≥', 'üèπ', 'üé£', 'ü•ä', 'ü•ã', 'üé™', 'üé≠', 'üé®', 'üé¨', 'üìö', 'üìñ', 'üìù', 'üìä', 'üìà', 'üìâ', 'üí∞', 'üí≥', 'üé´', 'üéüÔ∏è', 'üè∑Ô∏è',
  // Nature & Animaux
  'üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'üèµÔ∏è', 'üåø', 'üçÄ', 'üçÉ', 'üå±', 'üå≤', 'üå≥', 'üå¥', 'üåµ', 'üåæ', 'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ',
  // Transport & V√©hicules
  'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üõª', 'üöö', 'üöõ', 'üöú', 'üèçÔ∏è', 'üõµ', 'üö≤', 'üõ¥', 'üöÅ', '‚úàÔ∏è', 'üöÄ', 'üõ∏', '‚õµ', 'üö§', 'üõ•Ô∏è', 'üö¢',
  // Symboles & Formes
  '‚ù§Ô∏è', 'üíô', 'üíö', 'üíõ', 'üß°', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíó', 'üíñ', 'üíï', 'üíì', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì'
];

const COLOR_OPTIONS = [
  { value: 'primary', label: 'Rouge festif', color: 'hsl(var(--primary))' },
  { value: 'secondary', label: 'Jaune soleil', color: 'hsl(var(--secondary))' },
  { value: 'accent', label: 'Bleu ciel', color: 'hsl(var(--accent))' },
  { value: 'festive-green', label: 'Vert festif', color: 'hsl(var(--festive-green))' },
  { value: 'festive-orange', label: 'Orange festif', color: 'hsl(var(--festive-orange))' },
  { value: 'festive-purple', label: 'Violet festif', color: 'hsl(var(--festive-purple))' },
];

export const CategoryForm = ({ onSave, trigger }: CategoryFormProps) => {
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    icon: 'üé™',
    color: 'primary'
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (formData.name.trim()) {
      onSave(formData);
      setFormData({ name: '', icon: 'üé™', color: 'primary' });
      setOpen(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="outline" size="sm">
            <Plus className="w-4 h-4 mr-2" />
            Nouvelle cat√©gorie
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Nouvelle cat√©gorie</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">Nom de la cat√©gorie</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              placeholder="Ex: Boissons"
              required
            />
          </div>
          
          <div>
            <Label htmlFor="color">Couleur</Label>
            <Select
              value={formData.color}
              onValueChange={(value) => setFormData({ ...formData, color: value })}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {COLOR_OPTIONS.map((color) => (
                  <SelectItem key={color.value} value={color.value}>
                    <div className="flex items-center gap-2">
                      <div 
                        className="w-4 h-4 rounded-full border" 
                        style={{ backgroundColor: color.color }}
                      />
                      {color.label}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <div>
            <Label htmlFor="icon">Ic√¥ne</Label>
            <div className="flex flex-wrap gap-1 mt-2 p-3 border rounded-md max-h-48 overflow-y-auto">
              {EXTENDED_EMOJI_OPTIONS.map((emoji) => (
                <button
                  key={emoji}
                  type="button"
                  onClick={() => setFormData({ ...formData, icon: emoji })}
                  className={`text-xl p-1.5 rounded-md transition-colors hover:bg-muted ${
                    formData.icon === emoji 
                      ? 'bg-primary text-primary-foreground' 
                      : ''
                  }`}
                >
                  {emoji}
                </button>
              ))}
            </div>
          </div>
          
          <div className="flex gap-2 pt-4">
            <Button type="button" variant="outline" onClick={() => setOpen(false)} className="flex-1">
              Annuler
            </Button>
            <Button type="submit" className="flex-1 bg-gradient-festive">
              Cr√©er
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};